{"version":3,"sources":["utils/fetchClient.ts","components/Context/UserContext.tsx","api/users.ts","components/Context/PostContext.tsx","api/posts.ts","components/Context/CommentContext.tsx","api/comments.ts","components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/CommentItem.tsx","components/CommentsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","initialState","users","setUsers","selectedUser","setSelectedUser","UserContext","React","createContext","UserProvider","children","useState","loadUsers","a","loadedUsers","Error","useEffect","value","Provider","posts","setPosts","hasPostsError","setHasPostsError","isLoadingPosts","setIsLoadingPosts","selectedPost","setSelectedPost","PostContext","PostProvider","useContext","userId","id","postsData","catch","finally","comments","setComments","isLoadingComments","setIsLoadingComments","hasCommentsError","setHasCommentsError","submitNewComment","isSubmittingComment","setisSubmittingComment","deleteComment","isOpenNewCommentForm","setIsOpenNewCommentForm","CommentContext","CommentProvider","postId","commentsData","name","email","commentService","comment","prevComments","commentId","currentComments","filter","PostItem","post","title","className","type","cn","onClick","PostsList","map","Loader","CommentItem","href","CommentsList","NewCommentForm","formData","setFormData","hasError","setHasError","handleFormDataChange","e","target","prevState","prevData","onSubmit","preventDefault","nameInput","trim","bodyInput","emailInput","htmlFor","placeholder","onChange","PostDetails","noCommentsMsg","length","UserSelector","isFocused","setIsFocused","userInfoMsg","role","user","handleSelect","App","noPostsMsg","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41f5898d.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { User } from '../../types/User';\nimport { UsersContext } from '../../types/UsersContext';\nimport { getUsers } from '../../api/users';\n\nconst initialState = {\n  users: [],\n  setUsers: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n};\n\nexport const UserContext = React.createContext<UsersContext>(initialState);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UserProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch {\n      throw new Error('Failed to load users');\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const value = {\n    users,\n    setUsers,\n    selectedUser,\n    setSelectedUser,\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { PostsContext } from '../../types/PostsContext';\nimport { getPosts } from '../../api/posts';\nimport { UserContext } from './UserContext';\n\nconst initialState = {\n  posts: [],\n  setPosts: () => {},\n  hasPostsError: false,\n  setHasPostsError: () => {},\n  isLoadingPosts: false,\n  setIsLoadingPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n};\n\nexport const PostContext = React.createContext<PostsContext>(initialState);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostProvider: React.FC<Props> = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [hasPostsError, setHasPostsError] = useState(false);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const { selectedUser } = useContext(UserContext);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoadingPosts(true);\n\n      getPosts(selectedUser.id)\n        .then(postsData => setPosts(postsData))\n        .catch(() => setHasPostsError(true))\n        .finally(() => setIsLoadingPosts(false));\n    }\n  },\n  [selectedUser]);\n\n  const value = {\n    posts,\n    setPosts,\n    hasPostsError,\n    setHasPostsError,\n    isLoadingPosts,\n    setIsLoadingPosts,\n    selectedPost,\n    setSelectedPost,\n  };\n\n  return (\n    <PostContext.Provider value={value}>\n      {children}\n    </PostContext.Provider>\n\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n} from 'react';\nimport { Comment } from '../../types/Comment';\nimport { CommentsContext } from '../../types/CommentsContext';\nimport * as commentService from '../../api/comments';\nimport { PostContext } from './PostContext';\n\nconst initialState = {\n  comments: [],\n  setComments: () => {},\n  isLoadingComments: false,\n  setIsLoadingComments: () => {},\n  hasCommentsError: false,\n  setHasCommentsError: () => {},\n  submitNewComment: () => {},\n  isSubmittingComment: false,\n  setisSubmittingComment: () => {},\n  deleteComment: () => {},\n  isOpenNewCommentForm: false,\n  setIsOpenNewCommentForm: () => {},\n};\n\nexport const CommentContext\n  = React.createContext<CommentsContext>(initialState);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const CommentProvider: React.FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [hasCommentsError, setHasCommentsError] = useState(false);\n  const [isSubmittingComment, setisSubmittingComment] = useState(false);\n  const [isOpenNewCommentForm, setIsOpenNewCommentForm] = useState(false);\n\n  const { selectedPost } = useContext(PostContext);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoadingComments(true);\n\n      commentService.getComments(selectedPost.id)\n        .then(commentsData => setComments(commentsData))\n        .catch(() => setHasCommentsError(true))\n        .finally(() => setIsLoadingComments(false));\n    }\n  },\n  [selectedPost]);\n\n  const submitNewComment = ({\n    postId, name, email, body,\n  }: Omit<Comment, 'id'>) => {\n    setisSubmittingComment(true);\n\n    commentService.postComment({\n      postId, name, email, body,\n    })\n      .then(comment => setComments(prevComments => [...prevComments, comment]))\n      .finally(() => setisSubmittingComment(false));\n  };\n\n  const deleteComment = (commentId: number) => {\n    setComments(currentComments => currentComments\n      .filter(comment => comment.id !== commentId));\n\n    commentService.deleteComment(commentId)\n      .catch(() => setComments(comments));\n  };\n\n  const value = {\n    comments,\n    setComments,\n    isLoadingComments,\n    setIsLoadingComments,\n    hasCommentsError,\n    setHasCommentsError,\n    submitNewComment,\n    isSubmittingComment,\n    setisSubmittingComment,\n    deleteComment,\n    isOpenNewCommentForm,\n    setIsOpenNewCommentForm,\n  };\n\n  return (\n    <CommentContext.Provider value={value}>\n      {children}\n    </CommentContext.Provider>\n\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = ({\n  postId, name, email, body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { PostContext } from './Context/PostContext';\nimport { Post } from '../types/Post';\nimport { CommentContext } from './Context/CommentContext';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostItem: React.FC<Props> = ({ post }) => {\n  const {\n    id,\n    title,\n  } = post;\n\n  const {\n    selectedPost,\n    setSelectedPost,\n  } = useContext(PostContext);\n\n  const { setIsOpenNewCommentForm } = useContext(CommentContext);\n\n  const handleSelectPost = () => {\n    if (selectedPost && selectedPost.id === id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n\n    setIsOpenNewCommentForm(false);\n  };\n\n  return (\n    <>\n      <tr data-cy=\"Post\">\n        <td data-cy=\"PostId\">{id}</td>\n\n        <td data-cy=\"PostTitle\">\n          {title}\n        </td>\n\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            type=\"button\"\n            data-cy=\"PostButton\"\n            className={cn(\n              'button is-link',\n              { 'is-light': selectedPost?.id !== id },\n            )}\n            onClick={handleSelectPost}\n          >\n            {selectedPost?.id === id ? 'Close' : 'Open'}\n          </button>\n        </td>\n      </tr>\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { PostContext } from './Context/PostContext';\nimport { PostItem } from './PostItem';\n\nexport const PostsList: React.FC = () => {\n  const { posts } = useContext(PostContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem key={post.id} post={post} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  useContext,\n} from 'react';\nimport { Comment } from '../types/Comment';\nimport { CommentContext } from './Context/CommentContext';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment }) => {\n  const {\n    id,\n    name,\n    email,\n    body,\n  } = comment;\n\n  const { deleteComment } = useContext(CommentContext);\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => deleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, {\n  useContext,\n} from 'react';\nimport { CommentContext } from './Context/CommentContext';\nimport { CommentItem } from './CommentItem';\n\nexport const CommentsList: React.FC = () => {\n  const { comments } = useContext(CommentContext);\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => (\n        <CommentItem comment={comment} key={comment.id} />\n      ))}\n\n    </>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { CommentContext } from './Context/CommentContext';\nimport { Post } from '../types/Post';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ selectedPost }) => {\n  const {\n    submitNewComment,\n    isSubmittingComment,\n  } = useContext(CommentContext);\n\n  const [formData, setFormData] = useState<CommentData>({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [hasError, setHasError] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const { name, email, body } = formData;\n\n  const handleFormDataChange = (e: any) => {\n    const { name, value } = e.target;  // eslint-disable-line\n\n    setHasError(prevState => ({ ...prevState, [name]: false }));\n\n    setFormData(prevData => (\n      {\n        ...prevData,\n        [name]: value,\n      }\n    ));\n  };\n\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const nameInput = name.trim();\n    const bodyInput = body.trim();\n    const emailInput = email.trim();\n\n    if (!nameInput) {\n      setHasError(prevState => ({ ...prevState, name: true }));\n    }\n\n    if (!bodyInput) {\n      setHasError(prevState => ({ ...prevState, body: true }));\n    }\n\n    if (!emailInput) {\n      setHasError(prevState => ({ ...prevState, email: true }));\n    }\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    submitNewComment({\n      postId: selectedPost.id,\n      name: nameInput,\n      email: emailInput,\n      body:\n      bodyInput,\n    });\n\n    setFormData(prevData => ({ ...prevData, body: '' }));\n  };\n\n  const reset = () => {\n    setFormData({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setHasError({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': hasError.name })}\n            value={name}\n            onChange={handleFormDataChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasError.name\n        && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': hasError.email })}\n            value={email}\n            onChange={handleFormDataChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasError.email\n        && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': hasError.body })}\n            value={body}\n            onChange={handleFormDataChange}\n          />\n        </div>\n\n        {hasError.body\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Enter some text\n            </p>\n          )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button is-link',\n              { 'is-loading': isSubmittingComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, {\n  useContext,\n} from 'react';\nimport { Loader } from './Loader';\nimport { PostContext } from './Context/PostContext';\nimport { CommentContext } from './Context/CommentContext';\nimport { CommentsList } from './CommentsList';\nimport { NewCommentForm } from './NewCommentForm';\n\nexport const PostDetails: React.FC = () => {\n  const { selectedPost } = useContext(PostContext);\n\n  const {\n    comments,\n    isLoadingComments,\n    hasCommentsError,\n    isOpenNewCommentForm,\n    setIsOpenNewCommentForm,\n  } = useContext(CommentContext);\n\n  const noCommentsMsg\n    = !isLoadingComments && !hasCommentsError && !comments.length;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {hasCommentsError\n            && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"CommentsError\"\n              >\n                Something went wrong\n              </div>\n            )}\n\n          {noCommentsMsg\n            && (\n              <p\n                className=\"title is-4\"\n                data-cy=\"NoCommentsMessage\"\n              >\n                No comments yet\n              </p>\n            )}\n\n          {!!comments.length && <CommentsList />}\n\n          {isOpenNewCommentForm && selectedPost\n            ? <NewCommentForm selectedPost={selectedPost} />\n            : (\n              <div className=\"block\">\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsOpenNewCommentForm(true)}\n                >\n                  Write a comment\n                </button>\n              </div>\n            )}\n\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useContext,\n  useState,\n} from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { UserContext } from './Context/UserContext';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n  } = useContext(UserContext);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsFocused(false);\n  };\n\n  const userInfoMsg = selectedUser ? selectedUser.name : 'Choose a user';\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isFocused })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsFocused(!isFocused)}\n        >\n          <span>{userInfoMsg}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div\n          className=\"dropdown-content\"\n        >\n          {users.map(user => (\n            <a\n              href={`#$user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              key={user.id}\n              onClick={() => handleSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useContext,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { UserContext } from './components/Context/UserContext';\nimport { PostContext } from './components/Context/PostContext';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const {\n    selectedUser,\n  } = useContext(UserContext);\n\n  const {\n    posts,\n    hasPostsError,\n    isLoadingPosts,\n    selectedPost,\n  } = useContext(PostContext);\n\n  const noPostsMsg\n   = selectedUser && !isLoadingPosts && !hasPostsError && !posts.length;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n\n                <UserSelector />\n\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {!selectedUser\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {isLoadingPosts && <Loader />}\n\n                {hasPostsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!!posts.length\n                   && <PostsList />}\n\n                {noPostsMsg && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UserProvider } from './components/Context/UserContext';\nimport { PostProvider } from './components/Context/PostContext';\nimport { CommentProvider } from './components/Context/CommentContext';\n\nReactDOM.render(\n  <UserProvider>\n    <PostProvider>\n      <CommentProvider>\n        <App />\n      </CommentProvider>\n    </PostProvider>\n  </UserProvider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}